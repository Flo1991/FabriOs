//!
//!  ______    _          _    ____      
//! |  ____|  | |        (_)  / __ \     
//! | |__ __ _| |__  _ __ _  | |  | |___
//! |  __/ _` | '_ \| '__| | | |  | / __|
//! | | | (_| | |_) | |  | | | |__| \__ \
//! |_|  \__,_|_.__/|_|  |_|  \____/|___/
//!                                                                        
//! Copyright (c) 2025, Flo1991
//!
//! BSD 3-Clause License - see LICENSE file for details
//!
//! Author : Florian Wank
//! Creation Date : 24.03.2025
//! File : mod.rs -> rte
//!
//! # Short description
//! Runtime environment layer
//!
//! # Detailed description
//! This layer / file is used to handle global module data exchange.
//! One should handle all data exchange between different modules in this layer.
//!
//!
//!

//---------------------------------------------------------------------------------------------------------------------
// Includes
//---------------------------------------------------------------------------------------------------------------------
use crate::appl::ledm;
use crate::servl::swtimer;

//---------------------------------------------------------------------------------------------------------------------
// Types
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Statics
//---------------------------------------------------------------------------------------------------------------------
///runtime environment data
pub static mut RTE_D: RteData = RteData::init();

//---------------------------------------------------------------------------------------------------------------------
// Constants
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Enums
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Structs
//---------------------------------------------------------------------------------------------------------------------

///struct combining all runtime environment data into a single data struct
#[derive(Copy, Clone)]
pub struct RteData {
    pub ledm_data: ledm::LedmData,
    pub swtimer_data: swtimer::TimerData,
}

impl RteData {
    ///init the runtime environment with default data
    const fn init() -> Self {
        Self {
            ledm_data: ledm::LedmData::init(),
            swtimer_data: swtimer::TimerData::init(),
        }
    }
}

//---------------------------------------------------------------------------------------------------------------------
// Unions
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Macros
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Functions
//---------------------------------------------------------------------------------------------------------------------
