//!
//!  ______    _          _    ____      
//! |  ____|  | |        (_)  / __ \     
//! | |__ __ _| |__  _ __ _  | |  | |___
//! |  __/ _` | '_ \| '__| | | |  | / __|
//! | | | (_| | |_) | |  | | | |__| \__ \
//! |_|  \__,_|_.__/|_|  |_|  \____/|___/
//!                                                                        
//! Copyright (c) 2025, Flo1991
//!
//! BSD 3-Clause License - see LICENSE file for details
//!
//! Author : Florian Wank
//! Creation Date : 24.03.2025
//! File : gpt.rs
//!
//! # Short description
//! General purpose timer module implementation
//!
//! # Detailed description
//! @todo
//!
//!
//!

//---------------------------------------------------------------------------------------------------------------------
// Includes
//---------------------------------------------------------------------------------------------------------------------
use super::rcc::Rcc;
use super::rcc::F_CPU_HZ;
use crate::mcal::util::clr_reg_bitmsk;
use crate::mcal::util::get_reg;
use crate::mcal::util::set_reg;
use crate::mcal::util::set_reg_bitmsk;

//---------------------------------------------------------------------------------------------------------------------
// Types
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Statics
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Constants
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Enums
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Structs
//---------------------------------------------------------------------------------------------------------------------

/// register structure for timer 6 / timer 7 module registers; need C representation for correct memory layout
#[repr(C)]
pub struct Timer6_7 {
    pub cr1: u32,
    pub cr2: u32,
    pub reserved0: u32,
    pub dier: u32,
    pub sr: u32,
    pub egr: u32,
    pub reserved1: u32,
    pub reserved2: u32,
    pub reserved3: u32,
    pub cnt: u32,
    pub psc: u32,
    pub arr: u32,
}
impl Timer6_7 {
    /// method to the instance of timer 6
    pub fn inst_6() -> &'static mut Timer6_7 {
        unsafe { &mut *(0x4000_1000 as *mut Timer6_7) }
    }
    #[allow(dead_code)]
    pub fn inst_7() -> &'static mut Timer6_7 {
        unsafe { &mut *(0x4000_1400 as *mut Timer6_7) }
    }

    ///configure timer to run at F_CPU_HZ; so 1 count takes a time of 1 / F_CPU_HZ
    pub fn init(&mut self) {
        set_reg_bitmsk(&mut Rcc::inst().apb1rstr, 1 << 4);
        clr_reg_bitmsk(&mut Rcc::inst().apb1rstr, 1 << 4);

        set_reg_bitmsk(&mut Rcc::inst().apb1enr, 1 << 4);

        set_reg(&mut self.psc, 0);

        // set period to 1ms
        let time_ms: i32 = 1;
        set_reg(&mut self.arr, ((F_CPU_HZ / 1000 - 1) * time_ms) as u32);
        set_reg(&mut self.cr1, (1 << 7) | (1 << 2));
        set_reg(&mut self.psc, 0);
        set_reg(&mut self.cr1, 1);
    }

    pub fn timer_elapsed(&mut self) -> bool {
        if (self.sr & 1) != 0 {
            set_reg(&mut self.sr, 0);
            true
        } else {
            false
        }
    }

    pub fn get_cnt_value(&self) -> u32 {
        get_reg(&self.cnt)
    }

    pub fn reset_cnt_value(&mut self) {
        set_reg(&mut self.cnt, 0);
    }
}

//---------------------------------------------------------------------------------------------------------------------
// Unions
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Macros
//---------------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------------
// Functions
//---------------------------------------------------------------------------------------------------------------------
